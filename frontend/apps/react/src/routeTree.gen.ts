/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FoldersFolderLayoutRouteImport } from './routes/folders/_folderLayout'
import { Route as FoldersFolderLayoutFolderIdIndexRouteImport } from './routes/folders/_folderLayout/$folderId/index'
import { Route as FoldersFolderLayoutFolderIdFilesFileIdIndexRouteImport } from './routes/folders/_folderLayout/$folderId/files/$fileId/index'

const FoldersRouteImport = createFileRoute('/folders')()

const FoldersRoute = FoldersRouteImport.update({
  id: '/folders',
  path: '/folders',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FoldersFolderLayoutRoute = FoldersFolderLayoutRouteImport.update({
  id: '/_folderLayout',
  getParentRoute: () => FoldersRoute,
} as any)
const FoldersFolderLayoutFolderIdIndexRoute =
  FoldersFolderLayoutFolderIdIndexRouteImport.update({
    id: '/$folderId/',
    path: '/$folderId/',
    getParentRoute: () => FoldersFolderLayoutRoute,
  } as any)
const FoldersFolderLayoutFolderIdFilesFileIdIndexRoute =
  FoldersFolderLayoutFolderIdFilesFileIdIndexRouteImport.update({
    id: '/$folderId/files/$fileId/',
    path: '/$folderId/files/$fileId/',
    getParentRoute: () => FoldersFolderLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/folders': typeof FoldersFolderLayoutRouteWithChildren
  '/folders/$folderId': typeof FoldersFolderLayoutFolderIdIndexRoute
  '/folders/$folderId/files/$fileId': typeof FoldersFolderLayoutFolderIdFilesFileIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/folders': typeof FoldersFolderLayoutRouteWithChildren
  '/folders/$folderId': typeof FoldersFolderLayoutFolderIdIndexRoute
  '/folders/$folderId/files/$fileId': typeof FoldersFolderLayoutFolderIdFilesFileIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/folders': typeof FoldersRouteWithChildren
  '/folders/_folderLayout': typeof FoldersFolderLayoutRouteWithChildren
  '/folders/_folderLayout/$folderId/': typeof FoldersFolderLayoutFolderIdIndexRoute
  '/folders/_folderLayout/$folderId/files/$fileId/': typeof FoldersFolderLayoutFolderIdFilesFileIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/folders'
    | '/folders/$folderId'
    | '/folders/$folderId/files/$fileId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/folders'
    | '/folders/$folderId'
    | '/folders/$folderId/files/$fileId'
  id:
    | '__root__'
    | '/'
    | '/folders'
    | '/folders/_folderLayout'
    | '/folders/_folderLayout/$folderId/'
    | '/folders/_folderLayout/$folderId/files/$fileId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FoldersRoute: typeof FoldersRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/folders': {
      id: '/folders'
      path: '/folders'
      fullPath: '/folders'
      preLoaderRoute: typeof FoldersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/folders/_folderLayout': {
      id: '/folders/_folderLayout'
      path: '/folders'
      fullPath: '/folders'
      preLoaderRoute: typeof FoldersFolderLayoutRouteImport
      parentRoute: typeof FoldersRoute
    }
    '/folders/_folderLayout/$folderId/': {
      id: '/folders/_folderLayout/$folderId/'
      path: '/$folderId'
      fullPath: '/folders/$folderId'
      preLoaderRoute: typeof FoldersFolderLayoutFolderIdIndexRouteImport
      parentRoute: typeof FoldersFolderLayoutRoute
    }
    '/folders/_folderLayout/$folderId/files/$fileId/': {
      id: '/folders/_folderLayout/$folderId/files/$fileId/'
      path: '/$folderId/files/$fileId'
      fullPath: '/folders/$folderId/files/$fileId'
      preLoaderRoute: typeof FoldersFolderLayoutFolderIdFilesFileIdIndexRouteImport
      parentRoute: typeof FoldersFolderLayoutRoute
    }
  }
}

interface FoldersFolderLayoutRouteChildren {
  FoldersFolderLayoutFolderIdIndexRoute: typeof FoldersFolderLayoutFolderIdIndexRoute
  FoldersFolderLayoutFolderIdFilesFileIdIndexRoute: typeof FoldersFolderLayoutFolderIdFilesFileIdIndexRoute
}

const FoldersFolderLayoutRouteChildren: FoldersFolderLayoutRouteChildren = {
  FoldersFolderLayoutFolderIdIndexRoute: FoldersFolderLayoutFolderIdIndexRoute,
  FoldersFolderLayoutFolderIdFilesFileIdIndexRoute:
    FoldersFolderLayoutFolderIdFilesFileIdIndexRoute,
}

const FoldersFolderLayoutRouteWithChildren =
  FoldersFolderLayoutRoute._addFileChildren(FoldersFolderLayoutRouteChildren)

interface FoldersRouteChildren {
  FoldersFolderLayoutRoute: typeof FoldersFolderLayoutRouteWithChildren
}

const FoldersRouteChildren: FoldersRouteChildren = {
  FoldersFolderLayoutRoute: FoldersFolderLayoutRouteWithChildren,
}

const FoldersRouteWithChildren =
  FoldersRoute._addFileChildren(FoldersRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FoldersRoute: FoldersRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
